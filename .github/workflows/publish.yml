name: Build and Publish
on:
  push:
    paths:
      - '.changeset/**'
      - 'packages/**'
    branches:
      - main
  workflow_dispatch:

jobs:
  build_linux:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        ocaml-compiler:
          - 5.2.0
    
    defaults:
      run:
        working-directory: packages/ppx

    steps:
      - uses: actions/checkout@v4

      - name: Generate unique switch name
        id: switch-name
        run: |
          echo "name=ppx-switch-${{ github.sha }}-linux" >> $GITHUB_OUTPUT

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          opam-disable-sandboxing: true
          opam-pin: false
          no-switch-setup: true

      - name: Setup switch
        run: |
          opam switch create ${{ steps.switch-name.outputs.name }} ${{ matrix.ocaml-compiler }} -y || opam switch set ${{ steps.switch-name.outputs.name }}
          eval $(opam env)

      - name: Install deps
        run: |
          opam update
          opam install . --deps-only --with-test
          opam list

      - name: Build
        run: opam exec -- dune build

      - name: Copy and rename built PPX file
        run: |
          mv ./_build/default/bin/bin.exe ppx-linux.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppx-linux
          path: packages/ppx/ppx-linux.exe
          if-no-files-found: error

  build_macos:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest]
        ocaml-compiler:
          - 5.2.0
    defaults:
      run:
        working-directory: packages/ppx

    steps:
      - uses: actions/checkout@v4

      - name: Generate unique switch name
        id: switch-name
        run: |
          echo "name=ppx-switch-${{ github.sha }}-macos" >> $GITHUB_OUTPUT

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          opam-disable-sandboxing: true
          opam-pin: false
          no-switch-setup: true

      - name: Setup switch
        run: |
          opam switch create ${{ steps.switch-name.outputs.name }} ${{ matrix.ocaml-compiler }} -y || opam switch set ${{ steps.switch-name.outputs.name }}
          eval $(opam env)

      - name: Install deps
        run: |
          opam update
          opam install . --deps-only --with-test
          opam list

      - name: Build
        run: opam exec -- dune build

      - name: Copy and rename built PPX file
        run: |
          mv ./_build/default/bin/bin.exe ppx-macos.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ppx-macos
          path: packages/ppx/ppx-macos.exe
          if-no-files-found: error

  release:
    name: Release
    needs: [build_linux, build_macos]
    runs-on: ubuntu-latest
    steps:
      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.2

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Download and organize artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp-artifacts

      - name: Move artifacts to packages/cli
        run: |
          mv temp-artifacts/ppx-linux/ppx-linux.exe packages/cli/
          mv temp-artifacts/ppx-macos/ppx-macos.exe packages/cli/

      - name: Install dependencies
        shell: bash
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Publish packages
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm release
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

      - name: Release to dev tag
        if: steps.changesets.outputs.published != 'true'
        run: |
          git checkout main
          pnpm changeset version --snapshot dev
          pnpm changeset publish --tag dev
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
          GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
