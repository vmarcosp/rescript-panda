// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Vitest from "vitest";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Js_undefined from "rescript/lib/es6/js_undefined.js";

var dangerously_reinforce_assertion = (function(assertion, cast) {
      let inner = assertion.__flags;
      inner.object = cast(inner.object);
      return assertion;
    });

function MakeRunner(Runner) {
  var describe = function (name, timeout, callback) {
    Runner.describe(name, (function () {
            callback();
          }), Js_undefined.fromOption(timeout));
  };
  var test = function (name, timeout, callback) {
    Runner.test(name, (function () {
            callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  var testAsync = function (name, timeout, callback) {
    Runner.testAsync(name, (function () {
            return callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  var it = function (name, timeout, callback) {
    Runner.it(name, (function () {
            callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  var itAsync = function (name, timeout, callback) {
    Runner.itAsync(name, (function () {
            return callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  var bench = function (name, time, iterations, warmupTime, warmupIterations, callback) {
    Runner.bench(name, (function () {
            callback(Vitest.expect);
          }), Js_undefined.fromOption({
              time: time,
              iterations: iterations,
              warmupTime: warmupTime,
              warmupIterations: warmupIterations
            }));
  };
  var benchAsync = function (name, time, iterations, warmupTime, warmupIterations, callback) {
    Runner.benchAsync(name, (function () {
            return callback(Vitest.expect);
          }), Js_undefined.fromOption({
              time: time,
              iterations: iterations,
              warmupTime: warmupTime,
              warmupIterations: warmupIterations
            }));
  };
  return {
          describe: describe,
          test: test,
          testAsync: testAsync,
          testPromise: testAsync,
          it: it,
          itAsync: itAsync,
          itPromise: itAsync,
          bench: bench,
          benchAsync: benchAsync,
          benchPromise: benchAsync
        };
}

function MakeConcurrentRunner(Runner) {
  var describe = function (name, timeout, callback) {
    Runner.describe(name, (function () {
            callback();
          }), Js_undefined.fromOption(timeout));
  };
  var testAsync = function (name, timeout, callback) {
    Runner.testAsync(name, (function () {
            return callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  var itAsync = function (name, timeout, callback) {
    Runner.itAsync(name, (function () {
            return callback(Vitest.expect);
          }), Js_undefined.fromOption(timeout));
  };
  return {
          describe: describe,
          testAsync: testAsync,
          test: testAsync,
          itAsync: itAsync,
          it: itAsync
        };
}

function Runner_describe(prim0, prim1, prim2) {
  Vitest.describe(prim0, prim1, prim2);
}

function Runner_test(prim0, prim1, prim2) {
  Vitest.test(prim0, prim1, prim2);
}

function Runner_testAsync(prim0, prim1, prim2) {
  Vitest.test(prim0, prim1, prim2);
}

function Runner_it(prim0, prim1, prim2) {
  Vitest.it(prim0, prim1, prim2);
}

function Runner_itAsync(prim0, prim1, prim2) {
  Vitest.it(prim0, prim1, prim2);
}

function Runner_bench(prim0, prim1, prim2) {
  Vitest.bench(prim0, prim1, prim2);
}

function Runner_benchAsync(prim0, prim1, prim2) {
  Vitest.bench(prim0, prim1, prim2);
}

function describe(name, timeout, callback) {
  Runner_describe(name, (function () {
          callback();
        }), Js_undefined.fromOption(timeout));
}

function test(name, timeout, callback) {
  Runner_test(name, (function () {
          callback(Vitest.expect);
        }), Js_undefined.fromOption(timeout));
}

function testAsync(name, timeout, callback) {
  Runner_testAsync(name, (function () {
          return callback(Vitest.expect);
        }), Js_undefined.fromOption(timeout));
}

function it(name, timeout, callback) {
  Runner_it(name, (function () {
          callback(Vitest.expect);
        }), Js_undefined.fromOption(timeout));
}

function itAsync(name, timeout, callback) {
  Runner_itAsync(name, (function () {
          return callback(Vitest.expect);
        }), Js_undefined.fromOption(timeout));
}

function bench(name, time, iterations, warmupTime, warmupIterations, callback) {
  Runner_bench(name, (function () {
          callback(Vitest.expect);
        }), Js_undefined.fromOption({
            time: time,
            iterations: iterations,
            warmupTime: warmupTime,
            warmupIterations: warmupIterations
          }));
}

function benchAsync(name, time, iterations, warmupTime, warmupIterations, callback) {
  Runner_benchAsync(name, (function () {
          return callback(Vitest.expect);
        }), Js_undefined.fromOption({
            time: time,
            iterations: iterations,
            warmupTime: warmupTime,
            warmupIterations: warmupIterations
          }));
}

function describe$1(name, timeout, callback) {
  var extra = function () {
    callback();
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.describe.concurrent(name, extra, extra$1);
}

function testAsync$1(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.concurrent(name, extra, extra$1);
}

function itAsync$1(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.concurrent(name, extra, extra$1);
}

var Concurrent = {
  describe: describe$1,
  testAsync: testAsync$1,
  test: testAsync$1,
  itAsync: itAsync$1,
  it: itAsync$1
};

function describe$2(name, timeout, callback) {
  var extra = function () {
    callback();
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.describe.only(name, extra, extra$1);
}

function test$1(name, timeout, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.only(name, extra, extra$1);
}

function testAsync$2(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.only(name, extra, extra$1);
}

function it$1(name, timeout, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.only(name, extra, extra$1);
}

function itAsync$2(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.only(name, extra, extra$1);
}

function bench$1(name, time, iterations, warmupTime, warmupIterations, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption({
        time: time,
        iterations: iterations,
        warmupTime: warmupTime,
        warmupIterations: warmupIterations
      });
  Vitest.bench.only(name, extra, extra$1);
}

function benchAsync$1(name, time, iterations, warmupTime, warmupIterations, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption({
        time: time,
        iterations: iterations,
        warmupTime: warmupTime,
        warmupIterations: warmupIterations
      });
  Vitest.bench.only(name, extra, extra$1);
}

function describe$3(name, timeout, callback) {
  var extra = function () {
    callback();
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.describe.only.concurrent(name, extra, extra$1);
}

function testAsync$3(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.only.concurrent(name, extra, extra$1);
}

function itAsync$3(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.only.concurrent(name, extra, extra$1);
}

var Concurrent$1 = {
  describe: describe$3,
  testAsync: testAsync$3,
  test: testAsync$3,
  itAsync: itAsync$3,
  it: itAsync$3
};

var Only = {
  describe: describe$2,
  test: test$1,
  testAsync: testAsync$2,
  testPromise: testAsync$2,
  it: it$1,
  itAsync: itAsync$2,
  itPromise: itAsync$2,
  bench: bench$1,
  benchAsync: benchAsync$1,
  benchPromise: benchAsync$1,
  Concurrent: Concurrent$1
};

function describe$4(name, timeout, callback) {
  var extra = function () {
    callback();
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.describe.skip(name, extra, extra$1);
}

function test$2(name, timeout, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.skip(name, extra, extra$1);
}

function testAsync$4(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.skip(name, extra, extra$1);
}

function it$2(name, timeout, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.skip(name, extra, extra$1);
}

function itAsync$4(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.skip(name, extra, extra$1);
}

function bench$2(name, time, iterations, warmupTime, warmupIterations, callback) {
  var extra = function () {
    callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption({
        time: time,
        iterations: iterations,
        warmupTime: warmupTime,
        warmupIterations: warmupIterations
      });
  Vitest.bench.skip(name, extra, extra$1);
}

function benchAsync$2(name, time, iterations, warmupTime, warmupIterations, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption({
        time: time,
        iterations: iterations,
        warmupTime: warmupTime,
        warmupIterations: warmupIterations
      });
  Vitest.bench.skip(name, extra, extra$1);
}

function describe$5(name, timeout, callback) {
  var extra = function () {
    callback();
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.describe.skip.concurrent(name, extra, extra$1);
}

function testAsync$5(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.test.skip.concurrent(name, extra, extra$1);
}

function itAsync$5(name, timeout, callback) {
  var extra = function () {
    return callback(Vitest.expect);
  };
  var extra$1 = Js_undefined.fromOption(timeout);
  Vitest.it.skip.concurrent(name, extra, extra$1);
}

var Concurrent$2 = {
  describe: describe$5,
  testAsync: testAsync$5,
  test: testAsync$5,
  itAsync: itAsync$5,
  it: itAsync$5
};

var Skip = {
  describe: describe$4,
  test: test$2,
  testAsync: testAsync$4,
  testPromise: testAsync$4,
  it: it$2,
  itAsync: itAsync$4,
  itPromise: itAsync$4,
  bench: bench$2,
  benchAsync: benchAsync$2,
  benchPromise: benchAsync$2,
  Concurrent: Concurrent$2
};

function test$3(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test2(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test3(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test4(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test5(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function testAsync$6(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test2Async(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test3Async(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test4Async(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function test5Async(cases, name, timeout, f) {
  Vitest.test.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe$6(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe2(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe3(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe4(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe5(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describeAsync(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe2Async(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe3Async(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe4Async(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

function describe5Async(cases, name, timeout, f) {
  Vitest.describe.each(cases)(name, f, Js_undefined.fromOption(timeout));
}

var Each = {
  test: test$3,
  test2: test2,
  test3: test3,
  test4: test4,
  test5: test5,
  testAsync: testAsync$6,
  test2Async: test2Async,
  test3Async: test3Async,
  test4Async: test4Async,
  test5Async: test5Async,
  describe: describe$6,
  describe2: describe2,
  describe3: describe3,
  describe4: describe4,
  describe5: describe5,
  describeAsync: describeAsync,
  describe2Async: describe2Async,
  describe3Async: describe3Async,
  describe4Async: describe4Async,
  describe5Async: describe5Async
};

function describe$7(name) {
  Vitest.describe.todo(name);
}

function test$4(name) {
  Vitest.test.todo(name);
}

function it$3(name) {
  Vitest.it.todo(name);
}

var Todo = {
  describe: describe$7,
  test: test$4,
  it: it$3
};

function beforeEachPromise(timeout, callback) {
  Vitest.beforeEach(callback, Js_undefined.fromOption(timeout));
}

function beforeAllPromise(timeout, callback) {
  Vitest.beforeAll(callback, Js_undefined.fromOption(timeout));
}

function afterEachPromise(timeout, callback) {
  Vitest.afterEach(callback, Js_undefined.fromOption(timeout));
}

function afterAll(timeout, callback) {
  Vitest.afterAll(callback, Js_undefined.fromOption(timeout));
}

function afterAllPromise(timeout, callback) {
  Vitest.afterAll(callback, Js_undefined.fromOption(timeout));
}

function Matchers(Config) {
  var toBeSome = function (some, expected) {
    if (some !== undefined) {
      return expected.toEqual(Caml_option.valFromOption(some));
    } else {
      return expected.not.toBeUndefined();
    }
  };
  var toBeNone = function (expected) {
    return expected.toBeUndefined();
  };
  var toThrow = function (message, expected) {
    return expected.toThrow(Js_undefined.fromOption(message));
  };
  var toThrowError = function (message, expected) {
    return expected.toThrowError(Js_undefined.fromOption(message));
  };
  var Int = {};
  var Float = {};
  var $$String = {};
  var $$Array = {};
  var toContain = function (expected, item) {
    return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContain(item);
  };
  var toContainEqual = function (expected, item) {
    return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContainEqual(item);
  };
  var toHaveLength = function (expected, length) {
    return dangerously_reinforce_assertion(expected, Belt_List.toArray).toHaveLength(length);
  };
  var toMatch = function (expected, list) {
    return dangerously_reinforce_assertion(expected, Belt_List.toArray).toMatchObject(Belt_List.toArray(list));
  };
  var List = {
    toContain: toContain,
    toContainEqual: toContainEqual,
    toHaveLength: toHaveLength,
    toMatch: toMatch
  };
  var Dict = {};
  return {
          toBeSome: toBeSome,
          toBeNone: toBeNone,
          toThrow: toThrow,
          toThrowError: toThrowError,
          Int: Int,
          Float: Float,
          $$String: $$String,
          $$Array: $$Array,
          List: List,
          Dict: Dict
        };
}

function toBeSome(some, expected) {
  if (some !== undefined) {
    return expected.toEqual(Caml_option.valFromOption(some));
  } else {
    return expected.not.toBeUndefined();
  }
}

function toBeNone(expected) {
  return expected.toBeUndefined();
}

function toThrow(message, expected) {
  return expected.toThrow(Js_undefined.fromOption(message));
}

function toThrowError(message, expected) {
  return expected.toThrowError(Js_undefined.fromOption(message));
}

var Int = {};

var Float = {};

var $$String = {};

var $$Array = {};

function toContain(expected, item) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContain(item);
}

function toContainEqual(expected, item) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContainEqual(item);
}

function toHaveLength(expected, length) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toHaveLength(length);
}

function toMatch(expected, list) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toMatchObject(Belt_List.toArray(list));
}

var List = {
  toContain: toContain,
  toContainEqual: toContainEqual,
  toHaveLength: toHaveLength,
  toMatch: toMatch
};

var Dict = {};

Promise.resolve();

function toBeSome$1(some, expected) {
  if (some !== undefined) {
    return expected.toEqual(Caml_option.valFromOption(some));
  } else {
    return expected.not.toBeUndefined();
  }
}

function toBeNone$1(expected) {
  return expected.toBeUndefined();
}

var Int$1 = {};

var Float$1 = {};

var $$String$1 = {};

var $$Array$1 = {};

function toContain$1(expected, item) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContain(item);
}

function toContainEqual$1(expected, item) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toContainEqual(item);
}

function toHaveLength$1(expected, length) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toHaveLength(length);
}

function toMatch$1(expected, list) {
  return dangerously_reinforce_assertion(expected, Belt_List.toArray).toMatchObject(Belt_List.toArray(list));
}

var List$1 = {
  toContain: toContain$1,
  toContainEqual: toContainEqual$1,
  toHaveLength: toHaveLength$1,
  toMatch: toMatch$1
};

var Dict$1 = {};

function toThrow$1(message, expected) {
  return expected.toThrow(Js_undefined.fromOption(message));
}

function toThrowError$1(message, expected) {
  return expected.toThrowError(Js_undefined.fromOption(message));
}

var $$Promise = {
  toBeSome: toBeSome$1,
  toBeNone: toBeNone$1,
  Int: Int$1,
  Float: Float$1,
  $$String: $$String$1,
  $$Array: $$Array$1,
  List: List$1,
  Dict: Dict$1,
  toThrow: toThrow$1,
  toThrowError: toThrowError$1
};

var Expect = {
  toBeSome: toBeSome,
  toBeNone: toBeNone,
  toThrow: toThrow,
  toThrowError: toThrowError,
  Int: Int,
  Float: Float,
  $$String: $$String,
  $$Array: $$Array,
  List: List,
  Dict: Dict,
  $$Promise: $$Promise
};

function assert_(message, value) {
  Vitest.assert(value, Js_undefined.fromOption(message));
}

function equal(message, a, b) {
  Vitest.assert.equal(a, b, Js_undefined.fromOption(message));
}

function deepEqual(message, a, b) {
  Vitest.assert.deepEqual(a, b, Js_undefined.fromOption(message));
}

var Assert = {
  assert_: assert_,
  equal: equal,
  deepEqual: deepEqual
};

function advanceTimersByTime(ms) {
  return Vitest.vi.advanceTimersByTime(ms);
}

function advanceTimersByTimeAsync(time) {
  return Vitest.vi.advanceTimersByTimeAsync(time);
}

function advanceTimersToNextTimer() {
  return Vitest.vi.advanceTimersToNextTimer();
}

function advanceTimersToNextTimerAsync() {
  return Vitest.vi.advanceTimersToNextTimerAsync();
}

function getTimerCount() {
  return Vitest.vi.getTimerCount();
}

function clearAllTimers() {
  return Vitest.vi.clearAllTimers();
}

function runAllTicks() {
  return Vitest.vi.runAllTicks();
}

function runAllTimers() {
  return Vitest.vi.runAllTimers();
}

function runAllTimersAsync() {
  return Vitest.vi.runAllTimersAsync();
}

function runOnlyPendingTimers() {
  return Vitest.vi.runOnlyPendingTimers();
}

function runOnlyPendingTimersAsync() {
  return Vitest.vi.runOnlyPendingTimersAsync();
}

function setSystemTime(time) {
  return Vitest.vi.setSystemTime(time.VAL);
}

function useFakeTimers(config, param) {
  return Vitest.vi.useFakeTimers(config !== undefined ? Caml_option.valFromOption(config) : undefined);
}

function useRealTimers() {
  return Vitest.vi.useRealTimers();
}

function isFakeTimers() {
  return Vitest.vi.isFakeTimers();
}

function getMockedSystemTime() {
  return Caml_option.nullable_to_opt(Vitest.vi.getMockedSystemTime());
}

function getRealSystemTime() {
  return Vitest.vi.getRealSystemTime();
}

function waitFor(callback, timeout, interval, param) {
  return Vitest.vi.waitFor(callback, {
              timeout: timeout,
              interval: interval
            });
}

function waitForAsync(callback, timeout, interval, param) {
  return Vitest.vi.waitFor(callback, {
              timeout: timeout,
              interval: interval
            });
}

function waitUntil(callback, timeout, interval, param) {
  return Vitest.vi.waitUntil(callback, {
              timeout: timeout,
              interval: interval
            });
}

function waitUntilAsync(callback, timeout, interval, param) {
  return Vitest.vi.waitUntil(callback, {
              timeout: timeout,
              interval: interval
            });
}

var Vi = {
  advanceTimersByTime: advanceTimersByTime,
  advanceTimersByTimeAsync: advanceTimersByTimeAsync,
  advanceTimersToNextTimer: advanceTimersToNextTimer,
  advanceTimersToNextTimerAsync: advanceTimersToNextTimerAsync,
  getTimerCount: getTimerCount,
  clearAllTimers: clearAllTimers,
  runAllTicks: runAllTicks,
  runAllTimers: runAllTimers,
  runAllTimersAsync: runAllTimersAsync,
  runOnlyPendingTimers: runOnlyPendingTimers,
  runOnlyPendingTimersAsync: runOnlyPendingTimersAsync,
  setSystemTime: setSystemTime,
  useFakeTimers: useFakeTimers,
  useRealTimers: useRealTimers,
  isFakeTimers: isFakeTimers,
  getMockedSystemTime: getMockedSystemTime,
  getRealSystemTime: getRealSystemTime,
  waitFor: waitFor,
  waitForAsync: waitForAsync,
  waitUntil: waitUntil,
  waitUntilAsync: waitUntilAsync
};

var InSource = {};

var testPromise = testAsync;

var itPromise = itAsync;

var benchPromise = benchAsync;

export {
  MakeRunner ,
  MakeConcurrentRunner ,
  describe ,
  test ,
  testAsync ,
  testPromise ,
  it ,
  itAsync ,
  itPromise ,
  bench ,
  benchAsync ,
  benchPromise ,
  Concurrent ,
  Only ,
  Skip ,
  Each ,
  Todo ,
  beforeEachPromise ,
  beforeAllPromise ,
  afterEachPromise ,
  afterAll ,
  afterAllPromise ,
  Matchers ,
  Expect ,
  Assert ,
  Vi ,
  InSource ,
}
/*  Not a pure module */
