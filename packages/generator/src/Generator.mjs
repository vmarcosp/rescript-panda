// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.mjs";

function generatePrimitiveType(value) {
  if (typeof value !== "object") {
    switch (value) {
      case "String" :
          return "string";
      case "Int" :
          return "int";
      case "Unit" :
          return "unit";
      case "OpenObject" :
          return "{..}";
      
    }
  } else {
    switch (value.TAG) {
      case "Function" :
          var parsedArgs = "(" + value._0.map(function (v) {
                  return generatePrimitiveType(v);
                }).join(", ") + ")";
          return parsedArgs + " => " + generatePrimitiveType(value._1);
      case "Record" :
          var fields = Core__Array.reduceWithIndex(value._0, "", (function (content, param, index) {
                  var separator = index === 0 ? "" : ", ";
                  return content + separator + param[0] + ": " + generatePrimitiveType(param[1]);
                }));
          return "{ " + fields + " }";
      case "UserDefinedType" :
          return value._0;
      case "PolyVariant" :
          var generateVariantWithParams = function (acc, type_, index) {
            var separator = index === 0 ? "" : ", ";
            return acc + separator + generatePrimitiveType(type_);
          };
          var generateVariants = function (variants, param, index) {
            var maybeTypes = param[1];
            var variantName = param[0];
            var separator = index === 0 ? "" : " | ";
            if (maybeTypes !== undefined && maybeTypes.length !== 0) {
              var parsedTypes = Core__Array.reduceWithIndex(maybeTypes, "", generateVariantWithParams);
              return variants + separator + "#" + variantName + "(" + parsedTypes + ")";
            }
            return variants + separator + "#" + variantName;
          };
          return "[ " + Core__Array.reduceWithIndex(value._0, "", generateVariants) + " ]";
      
    }
  }
}

function generateUserDefinedType(value) {
  var recursiveFlag = value.recursive === true ? "rec " : "";
  return "type " + recursiveFlag + value.name + " = " + generatePrimitiveType(value.type_);
}

function generateExternalDeclarationType(value) {
  if (typeof value !== "object") {
    return "@val";
  } else {
    return "@module(\"" + value._0 + "\")";
  }
}

function generateIdentifier(value) {
  return value._0;
}

function generate(nodes) {
  return nodes.map(function (node) {
                if (node.TAG === "ExternalDeclaration") {
                  return generateExternalDeclarationType(node._0) + " external " + node._1._0 + ": " + generatePrimitiveType(node._2) + " = \"" + node._3 + "\"";
                } else {
                  return generateUserDefinedType(node._0);
                }
              }).join("\n");
}

var AST;

export {
  AST ,
  generatePrimitiveType ,
  generateUserDefinedType ,
  generateExternalDeclarationType ,
  generateIdentifier ,
  generate ,
}
/* No side effect */
